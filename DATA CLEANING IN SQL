/*

Cleaning Data in SQL Queries

*/

SELECT *
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
limit 100

-----------------------------------------------------------------------------------------------------

-- Standardize Date Format

SELECT *
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
WHERE SAFE.PARSE_DATE('%B %d, %Y', SaleDate) IS NULL

UPDATE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
SET SaleDate = 'April 7, 2015'
WHERE SaleDate = '20150407-0030110'

-- Create backup table before replacing the original data
CREATE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing_backup` AS
SELECT * FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

-- replacing the exsisting table, with orginal table + SaleDate_converted column
CREATE OR REPLACE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS
SELECT *,
FORMAT_DATE('%Y-%m-%d', PARSE_DATE('%B %d, %Y', SaleDate)) AS SaleDate_converted
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
-- removing the SaleDate_converted temporary column
CREATE OR REPLACE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS
SELECT UniqueID_, ParcelID, LandUse, PropertyAddress, SalePrice, LegalReference, SoldAsVacant, OwnerName, OwnerAddress, Acreage, TaxDistrict, LandValue, BuildingValue, TotalValue, YearBuilt, Bedrooms, FullBath, HalfBath,
SaleDate_converted as SaleDate
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

SELECT *
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
WHERE 
ParcelID IN (
  SELECT ParcelID
  FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
  GROUP BY ParcelID
  HAVING COUNT(*) > 1
)
--AND PropertyAddress IS NULL
ORDER BY ParcelID;


-- Ingenious method to select row with duplicate parcel ids, by joining same tables and selecting rows with same parcel ids but not uniqueIDs. 


SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, IFNULL(a.PropertyAddress, b.PropertyAddress)
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS a
JOIN `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS b
ON a.ParcelID = b.ParcelID
AND a.UniqueID_ <> b.UniqueID_  
WHERE a.PropertyAddress IS NULL

UPDATE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
SET PropertyAddress = IFNULL(a.PropertyAddress, b.PropertyAddress)
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS a
JOIN `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS b
ON a.ParcelID = b.ParcelID
AND a.UniqueID_ <> b.UniqueID_  
WHERE a.PropertyAddress IS NULL

CREATE OR REPLACE TEMPORARY TABLE temp_table AS
SELECT ParcelID, MAX(PropertyAddress) as PropertyAddress
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
WHERE PropertyAddress IS NOT NULL
GROUP BY ParcelID;
UPDATE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` main
SET main.PropertyAddress = temp_table.PropertyAddress
FROM temp_table
WHERE main.ParcelID = temp_table.ParcelID
AND main.PropertyAddress IS NULL;


--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)


SELECT SUBSTRING(PropertyAddress, 1, STRPOS(PropertyAddress, ',') - 1) AS address
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

--RCA why earlier query not working. 
SELECT PropertyAddress
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
WHERE STRPOS(PropertyAddress, ',') = 0

--SUBSTRING Query didnt work so found the RCA. There were 3 row of dirty data with no ','. DELETING THERE ROWs. 
DELETE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
WHERE STRPOS(PropertyAddress, ',') = 0


SELECT   SUBSTRING(PropertyAddress, 1, STRPOS(PropertyAddress, ',') - 1) AS property_split_address,
  TRIM(SUBSTRING(PropertyAddress, STRPOS(PropertyAddress, ',') + 1, LENGTH(PropertyAddress))) AS property_split_city
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`


-- Create backup table before replacing the original data
CREATE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing_backup2` AS
SELECT * FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

-- Update the table with new columns
CREATE OR REPLACE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS
SELECT 
  *, 
  TRIM(SUBSTRING(PropertyAddress, 1, STRPOS(PropertyAddress, ',') - 1)) AS property_split_address,
  TRIM(SUBSTRING(PropertyAddress, STRPOS(PropertyAddress, ',') + 1, LENGTH(PropertyAddress))) AS property_split_city
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`;


-- Create backup table before replacing the original data
CREATE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing_backup3` AS
SELECT * FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

CREATE OR REPLACE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS
SELECT * FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing_backup3`

CREATE OR REPLACE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS
SELECT 
  *,
  TRIM(SPLIT(OwnerAddress, ',')[SAFE_OFFSET(0)]) AS owner_split_address,
  TRIM(SPLIT(OwnerAddress, ',')[SAFE_OFFSET(1)]) AS owner_split_city,
  TRIM(SPLIT(OwnerAddress, ',')[SAFE_OFFSET(2)]) AS owner_split_state
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field


-- Create backup table before replacing the original data
CREATE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing_backup4` AS
SELECT * FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

UPDATE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
SET SoldAsVacant = CASE 
  WHEN SoldAsVacant = 'Y' THEN 'Yes'
  WHEN SoldAsVacant = 'N' THEN 'No'
  ELSE SoldAsVacant
  END
WHERE TRUE


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates
/*
WITH row_num_CTE AS(
  SELECT *, ROW_NUMBER() OVER( PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference 
                              ORDER BY UniqueID_ ) ROW_NUMBER
  FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
)
DELETE 
FROM row_num_CTE
WHERE ROW_NUMBER > 1
--ORDER BY PropertyAddress
*/

DELETE FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
WHERE UniqueID_ IN (
  SELECT UniqueID_
  FROM (
    SELECT UniqueID_, ROW_NUMBER() OVER( 
        PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference 
        ORDER BY UniqueID_ ) AS ROW_NUMBER
    FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
  ) 
  WHERE ROW_NUMBER > 1
);


---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns

CREATE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing_backup5` AS
SELECT * FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`

/*
ALTER TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
*/

CREATE OR REPLACE TABLE `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing` AS
SELECT UniqueID_,  ParcelID,  LandUse, SalePrice, LegalReference, SoldAsVacant, OwnerName, Acreage, LandValue, BuildingValue,  TotalValue,  YearBuilt,  Bedrooms, FullBath, HalfBath, property_split_address,  property_split_city, owner_split_address, owner_split_city,  owner_split_state
FROM `rock-elevator-382815.SQL_Project_Cleaning.NashvilleHousing`
